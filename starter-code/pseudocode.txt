Problem 1:

func sumArray(var A as array of length n)
    var sum as int = 0
    for i from 0 to n - 1
        sum += A[i]
    return sum
end func

Running time: linear: O(n)
Explanation: sum starts off at 0 and goes through each iteration of the array and adds to the original sum. Because it goes through each iteration, it's linear.

----------------------------------------------------------------

Problem 2:

func sumMatrix(var A as n x n matrix) // A matrix can be represented as an array of arrays, from A[0][0] to A[n][n]
    var sum as int = 0
    for i from 0 to n - 1
        sum += sumArray(A[i])
    return sum
end func

Running time: linear: O(n)
Explanation: As it goes down array A it adds everything in A[i] then goes to A[i+1] until it get to A[n] and because everything in the sub array is constant, it's just linear.

----------------------------------------------------------------

Problem 3:

func countDivisionsByTwo(var n as int)
    var count as int = 0
    var i as int = n
    while i >= 1
        count++
        i = i / 2
    return count
end func

Running time: Logarithmic: O(log(n))
Explanation: It divides it by 2 each time. The amount of time would be whatever number to the second power it takes to get to n.

----------------------------------------------------------------

Problem 4:

func arrayMax(var A as array of length n)
    var currentMax as int = A[0]
    for i from 0 to n - 1
        if A[i] > currentMax then
            currentMax = A[i]
    return currentMax
end func

Running time: Linear: O(n)
Explanation: Method is just looking for the maximum value so as it goes through the array, it checks to see if it's higher than the currentMax. If it is, it sets it to the new max just found and continues going through the list until it reaches n.

----------------------------------------------------------------

***BONUS*** Problem 5:

func bonusFunction(var n as int)
    var total as int = 0
    for i from 1 to n
        for j from 1 to n
            total += 1
        for k from 1 to 2 * n
            total += 1
            var m as int = 0
            while (m < 3 * n)
                total += 1
                m += 2
    return total
end func

Running time: polynomial: O(n^3)
Explanation: There are three nested loops. The second nested loop is quadratic (n^2 ) but it's within another for loop which makes it n^3.
